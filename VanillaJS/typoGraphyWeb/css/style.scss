@charset "UTF-8";
@import "reset";
@import url("https://fonts.googleapis.com/css2?family=Orbitron&family=Rajdhani:wght@300&display=swap");

body {
  width: 100%;
  height: 100vh;
  overflow: hidden;
  // 3개 : top, 좌우, bottom
  padding: 25vh 10vw 15vh;

  main {
    width: 100%;
    height: 100vh;
    // 원래 위치(static)를 기준으로 relative하게 배치
    position: relative;

    h1 {
      // 배치 기준을 상위 요소(default인 static이 아닌)에 따라 결정
      position: absolute;
      left: 0px;
      top: -70px;
      font: 45px/1 "Rajdhani";
      color: #555;

      &::before {
        content: "";
        // 상위 요소 따라 배치 결정
        position: absolute;
        left: 0;
        // 위로 살짝 올리기
        top: -10px;
        width: 50px;
        height: 1px;
        background-color: #111;
      }
    }

    .btnUp {
      display: block;
      width: 61px;
      height: 50px;
      position: absolute;
      left: -70px;
      bottom: 620px;

      &::before,
      &::after {
        content: "";
        display: block;
        width: 1px;
        height: 20px;
        background-color: #777;
        // 이 값으로 인해 before와 after의 위치를 동일하게 가져갈 수 있게됨
        position: absolute;
        top: 0px;
        left: 50%;
        // 회전중심을 맞춰서 화살표가 되도록
        transform-origin: right top;
        // 속성값, 변화시간, 변화속도, 딜레이-시간 : 여기서 사용하는 값은 변화속도 + 딜레이-시간
        transition: 0.5s 0.2s;
      }
      // before와 after를 45도씩 반대로 회전을 줘서 화살표 형태 표현
      &::before {
        transform: rotate(45deg);
      }
      &::after {
        transform: rotate(-45deg);
      }
      // 화살표 중심선 표현
      span {
        display: block;
        // 세로로 길게 배치
        width: 1px;
        height: 40px;
        background-color: #777;
        // main에 맞춰 배치
        position: absolute;
        top: 0;
        left: 50%;
        transition: 0.5s;
      }
      // 글씨 : up/down
      p {
        font: 12px/1 "orbitron";
        color: #111;
        // 글씨간 간격 살짝
        letter-spacing: 2px;
        // main맞춰 배치
        // 현재는 페이지 살짝 아래에 안 보이게끔
        position: absolute;
        top: 100%;
        left: 50%;
        // 약간 왼쪽으로 이동하고 안 보이게끔
        transform: translateX(-50%);
        opacity: 0;
        // 0.5초 효과
        transition: 0.5s;
      }
      // btnUp을 호버시
      &:hover {
        // 각도 유지하면서 y축 위로 이동
        &::before {
          transform: rotate(45deg) translateY(-40px);
          opacity: 0;
        }
        &::after {
          transform: rotate(-45deg) translateY(-40px);
          opacity: 0;
        }
        span {
          transform: translateY(-40px);
          opacity: 0;
        }
        p {
          top: 10%;
          opacity: 1;
        }
      }
    }

    .btnDown {
      display: block;
      width: 61px;
      height: 50px;
      // main tag 기준 배치
      position: absolute;
      left: -70px;
      bottom: 200px;

      &::before,
      &::after {
        content: "";
        display: block;
        width: 1px;
        height: 20px;
        background-color: #777;
        position: absolute;
        bottom: 0px;
        left: 50%;
        // 얘는 아래 화살표 모양
        transform-origin: right bottom;
        // 0.5초의 변환효과, 0.2초의 딜레이
        transition: 0.5s 0.2s;
      }
      &::before {
        // 시계반대방향 회전
        transform: rotate(-45deg);
      }
      &::after {
        // 시계방향 회전
        transform: rotate(45deg);
      }
      span {
        display: block;
        width: 1px;
        height: 40px;
        background-color: #777;
        position: absolute;
        bottom: 0px;
        left: 50%;
        transition: 0.5s;
      }
      p {
        font: 12px/1 "orbitron";
        color: #111;
        text-align: center;
        letter-spacing: 2px;
        // 부모 태그 중에 position이 static이 아닌 태그 기준으로 삼는다.
        position: absolute;
        top: 0%;
        left: 50%;
        // 약간 위로, 약간 왼쪽으로
        transform: translate(-50%, -50%);
        opacity: 0;
        transition: 0.5s;
      }

      // 전반적으로 내려가게끔
      &:hover {
        &::before {
          transform: rotate(-45deg) translateY(40px);
          opacity: 0;
        }
        &::after {
          transform: rotate(45deg) translateY(40px);
          opacity: 0;
        }
        span {
          transform: translateY(40px);
          opacity: 0;
        }
        p {
          top: 50%;
          opacity: 1;
        }
      }
    }

    .panel {
      width: 100%;
      height: 100%;
      // 문서상 원래 있을 위치(static) 기준으로 이동
      position: relative;

      li {
        width: 100%;
        height: 100%;
        // panel class 기준 배치
        position: absolute;
        top: 0;
        left: 0;
        // 원근감 주기 : 화면 돌릴때 원근감있는거 확인 가능
        perspective: 400px;

        // 배경 처리
        .bg {
          width: 100%;
          height: 100%;
          // li tag 기준 배치
          position: absolute;
          top: 0;
          left: 0;
          // 잠시 배경 제거
          opacity: 0;
          transition: 0.8s;

          // svg이미지가 담긴 div태그 크기 결정
          .pic {
            width: 33vw;
            // bg 클래스(div)를 기준으로 배치
            position: absolute;
            // 위로 이동
            bottom: 5vh;
            // 오른쪽으로 이동
            right: -5vw;

            path {
              stroke: #111;
              stroke-width: 1;
              fill: black;
              stroke-dasharray: 2400;
              stroke-dashoffset: 2400;
              transition: stroke-dashoffset 2s 0.5s, fill 0.5s 1.5s;
            }
          }
        }

        // li tag위치의 형제 태그 - 가상 클래스 : 같은 유형(li)의 태그 중 순서 지정
        // li태그의 형제들 중 첫번째에서의 bg라는 클래스 이름 가진 태그 선택
        &:nth-of-type(1) .bg {
          background-color: rgb(199, 245, 253);
        }
        &:nth-of-type(2) .bg {
          background-color: rgb(186, 255, 213);
        }
        &:nth-of-type(3) .bg {
          background-color: rgb(240, 255, 200);
        }
        &:nth-of-type(4) .bg {
          background-color: rgb(255, 209, 251);
        }

        // 현재 랜더링되는 li 태그 부분의 배경
        &.on .bg {
          opacity: 1;
          transform: translateY(0%) rotateX(0deg);
          // svg
          path {
            fill: rgba(0, 0, 0, 0.5);
            stroke-dashoffset: 0;
          }
        }
        // 현재에서 넘어가는 li태그(up)는 사라지도록
        &.up .bg {
          opacity: 0;
          transform: translateY(-80%) rotateX(50deg);
        }
        // 이전 화면의 배경
        &.down .bg {
          opacity: 0;
          transform: translateY(80%) rotateX(-50deg);
        }
      }
    }
  }
}
